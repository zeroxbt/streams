import { EventEmitter } from '@libp2p/interfaces/events';
import type { Startable } from '@libp2p/interfaces/startable';
import type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interfaces/peer-discovery';
import { Components, Initializable } from '@libp2p/interfaces/components';
import type { Message } from '@libp2p/interfaces/pubsub';
import { symbol } from '@libp2p/interfaces/peer-discovery';
export declare const TOPIC = "_peer-discovery._p2p._pubsub";
export interface PubsubPeerDiscoveryInit {
    /**
     * How often (ms) we should broadcast our infos
     */
    interval?: number;
    /**
     * What topics to subscribe to. If set, the default will NOT be used.
     */
    topics?: string[];
    /**
     * If true, we will not broadcast our peer data
     */
    listenOnly?: boolean;
}
/**
 * A Peer Discovery Service that leverages libp2p Pubsub to find peers.
 */
export declare class PubSubPeerDiscovery extends EventEmitter<PeerDiscoveryEvents> implements PeerDiscovery, Startable, Initializable {
    private readonly interval;
    private readonly listenOnly;
    private readonly topics;
    private intervalId?;
    private components;
    constructor(init?: PubsubPeerDiscoveryInit);
    get [symbol](): true;
    get [Symbol.toStringTag](): string;
    init(components: Components): void;
    isStarted(): boolean;
    start(): void;
    /**
     * Subscribes to the discovery topic on `libp2p.pubsub` and performs a broadcast
     * immediately, and every `this.interval`
     */
    afterStart(): void;
    beforeStop(): void;
    /**
     * Unsubscribes from the discovery topic
     */
    stop(): void;
    /**
     * Performs a broadcast via Pubsub publish
     */
    _broadcast(): void;
    /**
     * Handles incoming pubsub messages for our discovery topic
     */
    _onMessage(event: CustomEvent<Message>): void;
}
//# sourceMappingURL=index.d.ts.map